apiVersion: v1
kind: ServiceAccount
metadata:
  name: ws-proxy-service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-updater
rules:
- apiGroups: [ "" ]
  resources: ["pods"]
  # Patch scope is needed because k8s-hosting-for-orleans does two things:
  # 1. It adds a label to the pod (if label isn't in the pod declaration) to identify the cluster it belongs to
  # 2. Delete the pod if it has been amrked as dead by Orleans Runtime 
  verbs: ["get", "watch", "list", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-updater-binding
subjects:
- kind: ServiceAccount
  name: ws-proxy-service-account
  apiGroup: ''
roleRef:
  kind: Role
  name: pod-updater
  apiGroup: ''
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ws-proxy
  labels:
    orleans/serviceId: ws-proxy
spec:
  selector:
    matchLabels:
      orleans/serviceId: ws-proxy
  replicas: 2
  template:
    metadata:
      labels:
        # This label is used to identify the service to Orleans
        orleans/serviceId: ws-proxy

        # This label is used to identify an instance of a cluster to Orleans.
        # Typically, this will be the same value as the previous label, or any
        # fixed value.
        # In cases where you are not using rolling deployments (for example,
        # blue/green deployments),
        # this value can allow for distinct clusters which do not communicate
        # directly with each others,
        # but which still share the same storage and other resources.
        orleans/clusterId: ws-proxy
    spec:
      serviceAccountName: ws-proxy-service-account
      containers:
        - name: proxy
          image: ws-proxy:1702322671
          imagePullPolicy: IfNotPresent # for minikube
          ports:
          # Define the ports which Orleans uses
          - containerPort: 11111 # for silo-to-silo
          - containerPort: 30000 # for client-to-silo
          - containerPort: 8080 # for http api
          - containerPort: 5223 # for orleans dashboard
          env:
          - name: ASPNETCORE_ENVIRONMENT
            value: "Production"
          # The Azure Storage connection string for clustering is injected as an
          # environment variable
          # It must be created separately using a command such as:
          # > kubectl create secret generic az-storage-acct `
          #     --from-file=key=./az-storage-acct.txt
          # TODO add as secrets
          - name: STORAGE_CONNECTION_STRING
            value: "AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;DefaultEndpointsProtocol=http;BlobEndpoint=http://azurite-service:10020/devstoreaccount1;QueueEndpoint=http://azurite-service:10021/devstoreaccount1;TableEndpoint=http://azurite-service:10022/devstoreaccount1;"
          # Configure settings to let Orleans know which cluster it belongs to
          # and which pod it is running in
          - name: ORLEANS_SERVICE_ID
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['orleans/serviceId']
          - name: ORLEANS_CLUSTER_ID
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['orleans/clusterId']
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: DOTNET_SHUTDOWNTIMEOUTSECONDS
            value: "120"
          - name: HTTP_PORT
            value: "8080"

          
      terminationGracePeriodSeconds: 180
  minReadySeconds: 60
  strategy:
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
---
apiVersion: v1
kind: Service
metadata:
    name: ws-proxy-api-service
spec:
  ports:
    - name: http-ws-api
      port: 8081
      targetPort: 8080
  selector:
    orleans/serviceId: ws-proxy
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
    name: ws-proxy-service
spec:
  ports:
    - name: orleans-portal
      port: 5223
      targetPort: 5223
  selector:
    orleans/serviceId: ws-proxy
  type: LoadBalancer